#!/usr/bin/env -S python
# -*- mode: python; coding: utf-8 -*-
import os, sys, argparse, optparse, re, json, unicodedata
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../lib")
from font_utils import open_font
import fontforge
running_as = os.path.splitext(os.path.basename(sys.argv[0]))[0]
def main():
    for filename in sys.argv[1:]:
        font_names = fontforge.fontsInFile(filename)
        if len(font_names) > 1:
            for font_name in font_names:
                font = open_font("%s(%s)" % (filename, font_name))
                if font is None:
                    continue
                font_data = get_font_data(font)
                font.close()
                font_data["filename"] = filename
                font_data["isCollection"] = True
                font_data["collectionItem"] = font_name
                file_data = { "fontData": font_data }
                print(json.dumps(file_data, indent=4))
        else:
            font = open_font(filename)
            if font is None:
                continue
            font_data = get_font_data(font)
            font.close()
            font_data["filename"] = filename
            font_data["isCollection"] = False
            file_data = { "fontData": font_data }
            print(json.dumps(file_data, indent=4))

def get_font_data(font):
    font_data = {}
    font_data.update({
        "familyName": font.familyname,
        "fondName": font.fondname,
        "fontName": font.fontname,
        "fullName": font.fullname,
        "weight": font.weight,
    })
    font_data.update({
        "uniqueId": font.uniqueid,
        "version": font.version,
        "sfntRevision": {
            "raw": font.sfntRevision,
            "cooked": ("%.3f" % font.sfntRevision),
            "numeric": round(font.sfntRevision * 1000) / 1000,
        },
    })
    font_data.update({
        "comment": font.comment,
        "copyright": font.copyright,
        "fontLog": font.fontlog,
    })
    font_data.update({
        "macStyle": {
            "numeric":     font.macstyle,
            "bold":        bool(font.macstyle & 0x01),
            "italic":      bool(font.macstyle & 0x02),
            "underline":   bool(font.macstyle & 0x04),
            "outline":     bool(font.macstyle & 0x08),
            "shadow":      bool(font.macstyle & 0x10),
            "condensed":   bool(font.macstyle & 0x20),
            "extended":    bool(font.macstyle & 0x40),
            "reservedBit": bool(font.macstyle & 0x80),
        },
    })
    font_data.update({
        "familyClass": font.os2_family_class,
        "fsType": font.os2_fstype,
        "styleMap": font.os2_stylemap,
        "panose": font.os2_panose,
        "os2Weight": font.os2_weight,
        "os2Width": font.os2_width,
    })
    font_data.update({
        "metrics": {
            "ascent": font.ascent,
            "capHeight": font.capHeight,
            "descent": font.descent,
            "designSize": font.design_size,
            "em": font.em,
            "italicAngle": font.italicangle,
            "underlinePos": font.upos,
            "underlineWidth": font.uwidth,
            "exHeight": font.xHeight,
        },
        "hheaMetrics": {
            "ascent": font.hhea_ascent,
            "ascentAdd": font.hhea_ascent_add,
            "descent": font.hhea_descent,
            "descentAdd": font.hhea_descent_add,
            "linegap": font.hhea_linegap,
        },
        "os2Metrics": {
            "strikeYPos": font.os2_strikeypos,
            "strikeYSize": font.os2_strikeysize,
            "subXOff": font.os2_subxoff,
            "subXSize": font.os2_subxsize,
            "subYOff": font.os2_subyoff,
            "subYSize": font.os2_subysize,
            "supXOff": font.os2_supxoff,
            "supXSize": font.os2_supxsize,
            "supYOff": font.os2_supyoff,
            "supYSize": font.os2_supysize,
        },
        "useTypoMetrics": font.os2_use_typo_metrics,
        "typoMetrics": {
            "ascent": font.os2_typoascent,
            "ascentAdd": font.os2_typoascent_add,
            "descent": font.os2_typodescent,
            "descentAdd": font.os2_typodescent_add,
            "linegap": font.os2_typolinegap,
        },
        "winMetrics": {
            "ascent": font.os2_winascent,
            "ascentAdd": font.os2_winascent_add,
            "descent": font.os2_windescent,
            "descentAdd": font.os2_windescent_add,
        },
        "vhea": {
            "linegap": font.vhea_linegap,
        },
    })
    font_data.update({
        "isCid": font.is_cid,
        "cid": {
            "copyright": font.cidcopyright,
            "familyName": font.cidfamilyname,
            "fontName": font.cidfontname,
            "fullName": font.cidfullname,
            "ordering": font.cidordering,
            "registry": font.cidregistry,
            "subfont": font.cidsubfont,
            "subfontCnt": font.cidsubfontcnt,
            "subfontNames": font.cidsubfontnames,
            "supplement": font.cidsupplement,
            "version": font.cidversion,
            "weight": font.cidweight,
        },
    })
    font_data.update({
        "encoding": font.encoding,
        "hasVMetrics": font.hasvmetrics,
        "headOptimizedForCleartype": font.head_optimized_for_cleartype,
        "horizontalBaseline": font.horizontalBaseline,
        "isQuadratic": font.is_quadratic,
        "onlyBitmaps": font.onlybitmaps,
        "codepages": font.os2_codepages,
        "unicodeRanges": font.os2_unicoderanges,
        "os2Vendor": font.os2_vendor,
        "os2Version": font.os2_version,
        "os2WeightWidthSlopeOnly": font.os2_weight_width_slope_only,
        "isStrokedFont": font.strokedfont,
        "strokeWidth": font.strokewidth,
        "verticalBaseline": font.verticalBaseline,
        "verticalOrigin": font.vertical_origin,
        "woffMajor": font.woffMajor,
        "woffMinor": font.woffMinor,
        "woffMetadata": font.woffMetadata,
    })
    if False:
        font_data.update({
            "activeLayer": font.activeLayer,
            "bitmapSizes": font.bitmapSizes,
            "changed": font.changed,
            # "cvt": font.cvt, # not JSON serializable
            "default_base_filename": font.default_base_filename,
            "gasp": font.gasp,
            "gasp_version": font.gasp_version,
            "gpos_lookups": font.gpos_lookups,
            "gsub_lookups": font.gsub_lookups,
            "guide": font.guide,
            "isnew": font.isnew,
            "layer_cnt": font.layer_cnt,
            "layers": font.layers,
            "loadState": font.loadState,
            "maxp_FDEFs": font.maxp_FDEFs,
            "maxp_IDEFs": font.maxp_IDEFs,
            "maxp_maxStackDepth": font.maxp_maxStackDepth,
            "maxp_storageCnt": font.maxp_storageCnt,
            "maxp_twilightPtCnt": font.maxp_twilightPtCnt,
            "maxp_zones": font.maxp_zones,
            "multilayer": font.multilayer,
            "path": font.path,
            "persistent": font.persistent,
            "math": font.math,
            "private": font.private,
            "privateState": font.privateState,
            "selection": font.selection,
            "sfd_path": font.sfd_path,
            "sfnt_names": font.sfnt_names,
            "size_feature": font.size_feature,
            "temporary": font.temporary,
            "texparameters": font.texparameters,
            "userdata": font.userdata,
        })

    glyphs_list_data = []
    font_data.update({
        "glyphList": glyphs_list_data
    });
    for glyph in font.glyphs():
        real_cp = real_codepoint(glyph)
        hex = "U+%04X" % real_cp if real_cp >= 0 else None
        glyph_data = {
            "codepoint": glyph.unicode,
            "glyphName": glyph.glyphname,
            "realCodepoint": real_cp,
        }
        if real_cp >= 0:
            glyph_data.update({
                "char": chr(real_cp),
                "unicodeHex": "U+%04X" % real_cp,
            });
            try:
                name = unicodedata.name(chr(real_cp))
                glyph_data.update({
                    "name": name,
                });
            except ValueError:
                pass
        glyphs_list_data.append(glyph_data)
    return font_data

def real_codepoint(glyph):
    if glyph.unicode >= 0:
        return glyph.unicode
    glyph_name = glyph.glyphname
    idx = glyph_name.find(".")
    if idx >= 1:
        glyph_name = glyph_name[0:idx]
    return fontforge.unicodeFromName(glyph_name)

main()
