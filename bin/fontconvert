#!/usr/bin/env -S python
# -*- mode: python; coding: utf-8; tab-width: 4 -*-
import os, sys, optparse
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../lib")
from font_utils import open_font, save_font, compute_dest_filename
import fontforge
def main():
    global opts
    parser = optparse.OptionParser()
    parser.add_option('-n', '--dry-run', action="store_true")
    parser.add_option('-v', '--verbose', action="count")
    opts, args = parser.parse_args()
    (source_filename, *dest_filenames) = args
    font_names = fontforge.fontsInFile(source_filename)
    if len(font_names) > 1:
        for font_name in font_names:
            if opts.dry_run:
                for dest_filename in dest_filenames:
                    final_dest_filename = compute_dest_filename(source_filename, dest_filename, font_name=font_name)
                    print("%s + %s (%s) => %s" % (source_filename, dest_filename, font_name, final_dest_filename))
            else:
                collection_virtual_filename = "%s(%s)" % (source_filename, font_name)
                font = open_font(collection_virtual_filename, verbose=opts.verbose)
                if font is None:
                    raise Exception("%s: no such font" % nth_filename)
                for dest_filename in dest_filenames:
                    final_dest_filename = compute_dest_filename(source_filename, dest_filename, font_name=font_name)
                    save_font(font, final_dest_filename, verbose=opts.verbose)
                font.close()
    else:
        if opts.dry_run:
            for dest_filename in dest_filenames:
                final_dest_filename = compute_dest_filename(source_filename, dest_filename)
                print("%s + %s => %s" % (source_filename, dest_filename, final_dest_filename))
        else:
            font = open_font(source_filename, verbose=opts.verbose)
            if font is None:
                raise Exception("%s: no such font" % nth_filename)
            for dest_filename in dest_filenames:
                final_dest_filename = compute_dest_filename(source_filename, dest_filename)
                save_font(font, final_dest_filename)
            font.close()
main()
